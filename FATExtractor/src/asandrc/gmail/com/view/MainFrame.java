package asandrc.gmail.com.view;

import asandrc.gmail.com.data.FAT32DIRElement;
import asandrc.gmail.com.data.FAT32Directory;
import asandrc.gmail.com.data.FAT32DirectoryTreeNode;
import asandrc.gmail.com.extractor.FAT32Extractor;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

/**
 * Класс главного окна FATExtractor
 * @author Саша
 */
public class MainFrame extends javax.swing.JFrame {

    private FAT32Extractor fat32Extractor;
    
    private String menuOpenIconPath = "resources/icons/package.png";
    private String menuCloseIconPath = "resources/icons/stop.png";
    
    private String leafIconPath = "resources/icons/folder-orange.png";
    private String openIconPath = "resources/icons/folder-green.png";
    private String closeIconPath = "resources/icons/folder-blue.png";
    private String aboutIconPath = "resources/icons/discussion.png";
    private String readyStatusIconPath = "resources/icons/user.png";
    private String successStatusIconPath = "resources/icons/check-green.png";
    private String failedStatusIconPath = "resources/icons/alert.png";
    
    private String extractIconPath = "resources/icons/arrow-green-up.png";
    
    private FAT32DIRElement extractedFile;

    public FAT32DIRElement getExtractedFile() {
        return extractedFile;
    }
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        fat32Extractor = new FAT32Extractor();
        jTree = new JTree();
        jTree.setModel(null);        
        if (menuOpenIconPath != null && menuOpenIconPath != null
                && extractIconPath != null) {
           ImageIcon menuOpenIcon = new ImageIcon(this.getClass().getResource(menuOpenIconPath));
           ImageIcon menuCloseIcon = new ImageIcon(this.getClass().getResource(menuCloseIconPath));
           ImageIcon extractToolIcon = new ImageIcon(this.getClass().getResource(extractIconPath));
           ImageIcon extractItemIcon = new ImageIcon(this.getClass().getResource(extractIconPath));
           ImageIcon aboutItemIcon = new ImageIcon(this.getClass().getResource(aboutIconPath));
           ImageIcon readyStatusIcon = new ImageIcon(this.getClass().getResource(readyStatusIconPath));
           openItem.setIcon(menuOpenIcon);
           closeItem.setIcon(menuCloseIcon);
           openToolButton.setIcon(menuOpenIcon);
           extractToolButton.setIcon(extractToolIcon);
           extractItem.setIcon(extractItemIcon);
           aboutItem.setIcon(aboutItemIcon);
           statusIconLabel.setIcon(readyStatusIcon);
        }
        contentList = new JList();
        jScrollPane1.setViewportView(jTree);
    }
    
    /**
     * Метод вывода информации о файловой системе
     */
    private void getInfo() {
        infoTextArea.setText("");
        infoTextArea.append(" Тип FAT: " + fat32Extractor.getTypeOfFileSystem());
        infoTextArea.append("\n BS_OEMNAME: " + fat32Extractor.getBS_OEMNAme());
        infoTextArea.append("\n FAT таблиц: " + fat32Extractor.getBPB_NumFATs().toString());
        infoTextArea.append("\n Байтов в секторе: " + fat32Extractor.getBPB_BytsPerSec().toString());
        infoTextArea.append("\n Секторов в кластере: " + fat32Extractor.getBPB_SecPerClus().toString());        
        infoTextArea.append("\n Количество кластеров: " + fat32Extractor.getCountOfClusters().toString());
        int size = fat32Extractor.getCountOfClusters() * fat32Extractor.getBPB_BytsPerSec();
        String dim = "";
        if (size >= 1024) {
            size /= 1024;
            dim = "Кб";
        } else if (size >= 1048576) {
            size /= 1048576;
            dim = "Мб";
        } else {          
           dim = "байт"; 
        }
        infoTextArea.append("\n Размер тома FAT32: " + size + " " + dim);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contentList = new javax.swing.JList();
        ToolBar = new javax.swing.JToolBar();
        openToolButton = new javax.swing.JButton();
        extractToolButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        statusIconLabel = new javax.swing.JLabel();
        statusTextLabel = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        closeItem = new javax.swing.JMenuItem();
        ActionMenu = new javax.swing.JMenu();
        extractItem = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FAT32Extractor");
        setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        setName("MainFrame"); // NOI18N
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Информация о файловой системе", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 0, 11))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        infoTextArea.setEditable(false);
        infoTextArea.setBackground(new java.awt.Color(226, 226, 226));
        infoTextArea.setColumns(20);
        infoTextArea.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        infoTextArea.setRows(5);
        infoTextArea.setDisabledTextColor(new java.awt.Color(153, 153, 153));
        infoTextArea.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(infoTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Структура FAT раздела", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 0, 11))); // NOI18N

        jTree.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("dir");
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTree);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Содержимое директории", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 0, 11))); // NOI18N

        contentList.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        contentList.setSelectionBackground(new java.awt.Color(204, 204, 204));
        contentList.setVisibleRowCount(25);
        jScrollPane3.setViewportView(contentList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        ToolBar.setFloatable(false);
        ToolBar.setRollover(true);
        ToolBar.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        openToolButton.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        openToolButton.setToolTipText("Открыть файл (образ) системы FAT32");
        openToolButton.setFocusable(false);
        openToolButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openToolButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openToolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openToolButtonActionPerformed(evt);
            }
        });
        ToolBar.add(openToolButton);

        extractToolButton.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        extractToolButton.setToolTipText("Извлечь файл в...");
        extractToolButton.setFocusable(false);
        extractToolButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        extractToolButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        extractToolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractToolButtonActionPerformed(evt);
            }
        });
        ToolBar.add(extractToolButton);

        statusIconLabel.setMaximumSize(new java.awt.Dimension(16, 12));
        statusIconLabel.setMinimumSize(new java.awt.Dimension(16, 12));

        statusTextLabel.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        statusTextLabel.setText("Готов");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(statusIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(statusTextLabel))
        );

        mainMenu.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        FileMenu.setText("Файл");
        FileMenu.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        openItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asandrc/gmail/com/view/resources/icons/package.png"))); // NOI18N
        openItem.setText("Открыть файл");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        FileMenu.add(openItem);
        FileMenu.add(jSeparator1);

        closeItem.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        closeItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asandrc/gmail/com/view/resources/icons/stop.png"))); // NOI18N
        closeItem.setText("Выход");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        FileMenu.add(closeItem);

        mainMenu.add(FileMenu);

        ActionMenu.setText("Действие");
        ActionMenu.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        extractItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        extractItem.setText("Извлечь в...");
        extractItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractItemActionPerformed(evt);
            }
        });
        ActionMenu.add(extractItem);

        mainMenu.add(ActionMenu);

        AboutMenu.setText("Справка");
        AboutMenu.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N

        aboutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        aboutItem.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        aboutItem.setText("О FATExtractor");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        AboutMenu.add(aboutItem);

        mainMenu.add(AboutMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(ToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Нажатие пункта меню "Фалй-Выход"
     * @param evt 
     */
    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeItemActionPerformed

    /**
     * Нажатие пункта меню "Файл-Открыть файл"
     * @param evt 
     */
    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        openFAT();
    }//GEN-LAST:event_openItemActionPerformed

    /**
     * Нажатие кнопки "Открыть" на панели инструментов
     * @param evt 
     */
    private void openToolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openToolButtonActionPerformed
        openFAT();
    }//GEN-LAST:event_openToolButtonActionPerformed

    /**
     * Нажатие кнопки "Извлечь в..." на панели инструментов
     * @param evt 
     */
    private void extractToolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractToolButtonActionPerformed
        extractFile();
    }//GEN-LAST:event_extractToolButtonActionPerformed

    /**
     * Нажатие пункта меню "Действия-Извлечь в..."
     * @param evt 
     */
    private void extractItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractItemActionPerformed
        extractFile();
    }//GEN-LAST:event_extractItemActionPerformed

    /**
     * Нажатие пункта меню "Справка-ОFATExtractor"
     * @param evt 
     */
    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(this, "FATExtractor предназначен для просмотра "
                + "содержимого\nи извлечения файлов из томов с файловой системой FAT32\n"
                + "\n"
                + "Чечко Александр Игоревич\n"
                + "asandrc@gmail.com");
    }//GEN-LAST:event_aboutItemActionPerformed

    /**
     * Метод извлечения файла
     */
    private void extractFile() {
        if (contentList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Файл не выбран");
        } else {
            if ((extractedFile.getDIR_Attr() 
                    & fat32Extractor.getATTR_DIRECTORY()) == fat32Extractor.getATTR_DIRECTORY()) {
                JOptionPane.showMessageDialog(this, "Нельзя извлекать директории в данной версии программы");
            } else {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
                fileChooser.setSelectedFile(new File(extractedFile.getShortName() + "." + extractedFile.getExpansion()));
                int answer = fileChooser.showDialog(null, "Извлечь файл в...");
                if (answer == JFileChooser.APPROVE_OPTION) {
                    File newF = new File(fileChooser.getCurrentDirectory().getAbsolutePath()
                            + "/" + extractedFile.getShortName().trim() + "." + extractedFile.getExpansion());
                    try {
                        FileOutputStream os = new FileOutputStream(newF);
                        os.write(fat32Extractor.extractFile(extractedFile));
                        os.close();
                        setExtractStatusSuccess(fileChooser.getCurrentDirectory().getAbsolutePath()
                            + "\\" + extractedFile.getShortName().trim() + "." + extractedFile.getExpansion());
                    } catch(Exception e) {
                        e.printStackTrace();
                        setExtractStatusFailed();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Отмена извлечения");
                }            
            }
        }
    }
    
    /**
     * Установка статуса успешного извлечения файла
     * @param path путь куда извлекся файл
     */
    private void setExtractStatusSuccess(String path) {
        ImageIcon successStatusIcon = new ImageIcon(this.getClass().getResource(successStatusIconPath));
        statusIconLabel.setIcon(successStatusIcon);
        statusTextLabel.setText("Файл успешно извлечен: " + path);
    }
    
    /**
     * Установка статуса неудачного извлечения файла
     */
    private void setExtractStatusFailed() {
        ImageIcon failedStatusIcon = new ImageIcon(this.getClass().getResource(failedStatusIconPath));
        statusIconLabel.setIcon(failedStatusIcon);
        statusTextLabel.setText("Ошибка извлечения");
    }
    
    /**
     * Метод открытия файла (образа) FAT32
     */
    private void openFAT() {
        JFileChooser fileChooser = new JFileChooser("./");
        int answer = fileChooser.showDialog(null, "Октрыть файл FAT");
        if (answer == JFileChooser.APPROVE_OPTION) {
            boolean checkFAT = fat32Extractor.openFAT(fileChooser.getSelectedFile());
            if (checkFAT) {
                buildTree(fat32Extractor.getRootElement());
                getInfo();
                setOpenSuccessStatus();
            } else {
                setOpenFailedStatus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Файл системы (образ) FAT32 не выбран");
        }
    }
    
    /**
     * Метод установки статуса успешного открытия файла FAT32
     */
    private void setOpenSuccessStatus() {
        ImageIcon succesStatusIcon = new ImageIcon(this.getClass().getResource(successStatusIconPath));
        statusIconLabel.setIcon(succesStatusIcon);
        statusTextLabel.setText("Файл (образ) FAT успешно открыт");
    }
    
    /**
     * Метод установки статуса неудачного открытия файла
     */
    private void setOpenFailedStatus() {
        ImageIcon failedStatusIcon = new ImageIcon(this.getClass().getResource(failedStatusIconPath));
        statusIconLabel.setIcon(failedStatusIcon);
        statusTextLabel.setText("Ошибка открытия файла");
    }
    
    /**
     * Метод построения дерева для древовидного списка jTree
     * @param rootElement корневой элемент директории FAT32
     */
    private void buildTree(FAT32Directory rootElement) {
        DefaultMutableTreeNode top = createNodes(rootElement);
        jTree = new JTree(top);
        
        ImageIcon leafIcon = new ImageIcon(this.getClass().getResource(leafIconPath));
        ImageIcon openIcon = new ImageIcon(this.getClass().getResource(openIconPath));
        ImageIcon closeIcon = new ImageIcon(this.getClass().getResource(closeIconPath));
        if (leafIcon != null && openIcon != null && closeIcon != null) {
            DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setOpenIcon(openIcon);
            renderer.setClosedIcon(closeIcon);
            jTree.setCellRenderer(renderer);
        }
        jTree.getSelectionModel().addTreeSelectionListener(new Selector());
        jScrollPane1.setViewportView(jTree);
    }
    
    /**
     * Метод создания узла дерева
     * @param rootElement узел предок
     * @return 
     */
    private DefaultMutableTreeNode createNodes(FAT32Directory rootElement) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(rootElement);
        DefaultMutableTreeNode childNode;
        
        int i = 0;
        FAT32Directory[] childs = new FAT32Directory[rootElement.getChildDirectories().size()];
        for(FAT32Directory child: rootElement.getChildDirectories()) {
            childs[i] = child;
            if (!childs[i].getChildDirectories().isEmpty())
                childNode = createNodes(childs[i]);
            else
                childNode = new DefaultMutableTreeNode(childs[i]);
            node.add(childNode);
            i++;
        }
        return node;
    }
    
    /**
     * Метод добавления содержимого выбраной директории в список contentList
     * @param obj выделеная директория типа FAT32Directory
     */
    protected void addContentOfDirToList(Object obj) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
        FAT32Directory f32Directory = (FAT32Directory) node.getUserObject();
        ListModel listModel = new DefaultListModel();
        contentList = new JList(listModel);
        contentList.addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        extractedFile = (FAT32DIRElement)contentList.getSelectedValue();                        
                    }
                });
        DefaultListModel model = (DefaultListModel)contentList.getModel();           
        for (int i = 0; i < f32Directory.getChildElements().size(); i++) {
            model.addElement(f32Directory.getChildElements().get(i));
        }
        jScrollPane3.setViewportView(contentList);
    }
    
    /**
     * Для получения выделеной директории как объект FAT32Directory
     * из дерева jTree
     */
    private class Selector implements TreeSelectionListener {
    public void valueChanged(TreeSelectionEvent event) {
      Object obj = event.getNewLeadSelectionPath().getLastPathComponent();      
      addContentOfDirToList(obj);      
    }
  }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenu ActionMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JList contentList;
    private javax.swing.JMenuItem extractItem;
    private javax.swing.JButton extractToolButton;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTree jTree;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JButton openToolButton;
    private javax.swing.JLabel statusIconLabel;
    private javax.swing.JLabel statusTextLabel;
    // End of variables declaration//GEN-END:variables
}
